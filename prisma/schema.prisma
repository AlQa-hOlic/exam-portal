// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider = "sqlite"
  url      = "file:dev.db"
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// model Account {
//   id                 String  @id @default(cuid())
//   userId             String
//   type               String
//   provider           String
//   providerAccountId  String
//   refresh_token      String?
//   access_token       String?
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String?
//   session_state      String?
//   oauth_token_secret String?
//   oauth_token        String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

model User {
  id                String             @id @default(cuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  email             String?            @unique
  emailVerified     DateTime?
  role              String?            @default("user")
  // accounts      Account[]
  sessions          Session[]
  examRegistrations ExamRegistration[]
  examSubmissions   ExamSubmission[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Exam {
  id                String             @id @default(cuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  title             String
  questions         Question[]
  examRegistrations ExamRegistration[]
  examSubmissions   ExamSubmission[]
}

model Question {
  id                    String                 @id @default(cuid())
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  title                 String
  examId                String
  exam                  Exam                   @relation(fields: [examId], references: [id])
  correctAnswerId       String?
  answers               Answer[]
  examSubmissionAnswers ExamSubmissionAnswer[]
}

model Answer {
  id                    String                 @id @default(cuid())
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  title                 String
  questionId            String
  question              Question               @relation(fields: [questionId], references: [id])
  examSubmissionAnswers ExamSubmissionAnswer[]
}

model ExamRegistration {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  startBefore DateTime @default(now())
  due         DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  examId      String
  exam        Exam     @relation(fields: [examId], references: [id])
}

model ExamSubmission {
  id                    String                 @id @default(cuid())
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  userId                String
  user                  User                   @relation(fields: [userId], references: [id])
  examId                String
  exam                  Exam                   @relation(fields: [examId], references: [id])
  examSubmissionAnswers ExamSubmissionAnswer[]
}

model ExamSubmissionAnswer {
  id               String         @id @default(cuid())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  examSubmissionId String
  examSubmission   ExamSubmission @relation(fields: [examSubmissionId], references: [id])
  questionId       String
  question         Question       @relation(fields: [questionId], references: [id])
  answerId         String
  answer           Answer         @relation(fields: [answerId], references: [id])
}
